// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  active    Boolean  @default(true)

  orders    Order[]  // add this relation
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  slug        String   @unique   // <-- non-nullable now
  products    Product[]
  active      Boolean  @default(true)
  dateCreated DateTime @default(now())
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  quantity    Int
  image       String?
  active      Boolean  @default(true)

  // Relation to Category
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Cart {
  id      String      @id @default(auto()) @map("_id") @db.ObjectId
  userId  String      @unique
  items   CartItem[]
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String
  name      String
  price     Float
  quantity  Int
  image     String?
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String?     @db.ObjectId
  user          User?       @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalPrice    Float
  paymentMethod String
  status        String      @default("Pending")
  createdAt     DateTime    @default(now())
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String
  name      String
  price     Float
  quantity  Int
  image     String?
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
}

